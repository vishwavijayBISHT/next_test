{"ast":null,"code":"import jwt from \"jsonwebtoken\";\nimport Cart from \"../../models/Cart\";\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"GET\":\n      await fetchuser(req, res);\n      break;\n\n    case \"PUT\":\n      await updateProducts(req, res);\n  }\n});\n\nfunction Authinicated(icomponenet) {\n  return (req, res) => {\n    const {\n      authorization\n    } = req.headers;\n\n    if (!authorization) {\n      return res.status(401).json({\n        error: \"you must be login\"\n      });\n    }\n\n    try {\n      const {\n        userid\n      } = jwt.verify(authorization, \"fxfgcgvhgvh\");\n      req.userid = userid;\n      return icomponenet(req, res);\n    } catch (err) {\n      return res.status(401).json({\n        error: \"you must be login\"\n      });\n    }\n  };\n}\n\nconst fetchuser = Authinicated(async (req, res) => {\n  const cart = await Cart.findOne({\n    user: req.userid\n  }).populate(\"products.prod\");\n  console.log(cart.products.prod);\n  return res.status(200).json(cart);\n});\nconst updateProducts = Authinicated(async (req, res) => {\n  try {\n    const {\n      quantity,\n      productId\n    } = req.body;\n    const cart = await Cart.findOne({\n      user: req.userid\n    });\n    console.log(cart.products);\n    const exixt = cart.products.some(pdoc => productId == pdoc.prod);\n    console.log(exixt);\n\n    if (exixt) {\n      const c = await Cart.findOneAndUpdate({\n        _id: cart._id,\n        \"products.prod\": productId\n      }, {\n        $inc: {\n          \"products.$.quantity\": quantity\n        }\n      });\n    } else {\n      const newp = {\n        quantity,\n        prod: productId\n      };\n      console.log(\"newp  \" + newp.prod);\n      const a = await Cart.findOneAndUpdate({\n        _id: cart._id\n      }, {\n        $push: {\n          products: {\n            quantity: newp.quantity,\n            prod: newp.prod\n          }\n        }\n      });\n      console.log(\" xasxasxcas    \" + a.products.prod);\n    }\n\n    return res.status(200).json({\n      message: \"Product added to cart\"\n    });\n  } catch (err) {\n    return res.status(401).json({\n      error: \"Cant add server error\"\n    });\n  }\n});","map":{"version":3,"sources":["C:/Users/TCZ-NISHU/Desktop/myprojects/next-p/pages/api/cart.js"],"names":["jwt","Cart","req","res","method","fetchuser","updateProducts","Authinicated","icomponenet","authorization","headers","status","json","error","userid","verify","err","cart","findOne","user","populate","console","log","products","prod","quantity","productId","body","exixt","some","pdoc","c","findOneAndUpdate","_id","$inc","newp","a","$push","message"],"mappings":"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","sourcesContent":["import jwt from \"jsonwebtoken\";\r\nimport Cart from \"../../models/Cart\";\r\n\r\nexport default async (req, res) => {\r\n  switch (req.method) {\r\n    case \"GET\":\r\n      await fetchuser(req, res);\r\n      break;\r\n    case \"PUT\":\r\n      await updateProducts(req, res);\r\n  }\r\n};\r\n\r\nfunction Authinicated(icomponenet) {\r\n  return (req, res) => {\r\n    const { authorization } = req.headers;\r\n\r\n    if (!authorization) {\r\n      return res.status(401).json({ error: \"you must be login\" });\r\n    }\r\n    try {\r\n      const { userid } = jwt.verify(authorization, \"fxfgcgvhgvh\");\r\n      req.userid = userid;\r\n\r\n      return icomponenet(req, res);\r\n    } catch (err) {\r\n      return res.status(401).json({ error: \"you must be login\" });\r\n    }\r\n  };\r\n}\r\n\r\nconst fetchuser = Authinicated(async (req, res) => {\r\n  const cart = await Cart.findOne({ user: req.userid }).populate(\r\n    \"products.prod\"\r\n  );\r\n  console.log(cart.products.prod);\r\n  return res.status(200).json(cart);\r\n});\r\nconst updateProducts = Authinicated(async (req, res) => {\r\n  try {\r\n    const { quantity, productId } = req.body;\r\n\r\n    const cart = await Cart.findOne({ user: req.userid });\r\n    console.log(cart.products);\r\n\r\n    const exixt = cart.products.some((pdoc) => productId == pdoc.prod);\r\n    console.log(exixt);\r\n    if (exixt) {\r\n      const c = await Cart.findOneAndUpdate(\r\n        { _id: cart._id, \"products.prod\": productId },\r\n        { $inc: { \"products.$.quantity\": quantity } }\r\n      );\r\n    } else {\r\n      const newp = { quantity, prod: productId };\r\n      console.log(\"newp  \" + newp.prod);\r\n      const a = await Cart.findOneAndUpdate(\r\n        {\r\n          _id: cart._id,\r\n        },\r\n        { $push: { products: { quantity: newp.quantity, prod: newp.prod } } }\r\n      );\r\n      console.log(\" xasxasxcas    \" + a.products.prod);\r\n    }\r\n\r\n    return res.status(200).json({ message: \"Product added to cart\" });\r\n  } catch (err) {\r\n    return res.status(401).json({ error: \"Cant add server error\" });\r\n  }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}