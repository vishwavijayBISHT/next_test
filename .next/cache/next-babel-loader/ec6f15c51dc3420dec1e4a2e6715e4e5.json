{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\TCZ-NISHU\\\\Desktop\\\\myprojects\\\\next-p\\\\components\\\\UserRoles.js\";\nimport { useState, useEffect } from \"react\";\nimport { parseCookies } from \"nookies\"; // import baseUrl from \"../helpers/baseUrl\";\n\nfunction UserRoles() {\n  const {\n    0: users,\n    1: setUsers\n  } = useState([]);\n  const {\n    token\n  } = parseCookies();\n  console.log(\"fetchuse\");\n  useEffect(() => {\n    console.log(\"fetchuse\");\n    fetchUser();\n  }, []);\n\n  const fetchUser = async () => {\n    const res = await fetch(`http://localhost:3000/api/user`, {\n      method: \"GET\",\n      headers: {\n        Authorization: token\n      }\n    });\n    const res2 = await res.json();\n    console.log(res2);\n    setUsers(res2);\n  };\n\n  const handleRole = async (_id, role) => {\n    const res = await fetch(`http://localhost:3000/api/user`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token\n      },\n      body: JSON.stringify({\n        _id,\n        role\n      })\n    });\n    const res2 = await res.json();\n    console.log(res2); // setUsers(res2)\n\n    const updatedUsers = users.map(user => {\n      if (user.role != res2.role && user.email == res2.email) {\n        return res2;\n      } else {\n        return user;\n      }\n    });\n    setUsers(updatedUsers);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"User roles\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Role\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: users.map(item => {\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              onClick: () => handleRole(item._id, item.role),\n              children: item.role\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\nexport default UserRoles;","map":{"version":3,"sources":["C:/Users/TCZ-NISHU/Desktop/myprojects/next-p/components/UserRoles.js"],"names":["useState","useEffect","parseCookies","UserRoles","users","setUsers","token","console","log","fetchUser","res","fetch","method","headers","Authorization","res2","json","handleRole","_id","role","body","JSON","stringify","updatedUsers","map","user","email","item","name"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { parseCookies } from \"nookies\";\r\n// import baseUrl from \"../helpers/baseUrl\";\r\n\r\nfunction UserRoles() {\r\n  const [users, setUsers] = useState([]);\r\n  const { token } = parseCookies();\r\n  console.log(\"fetchuse\");\r\n  useEffect(() => {\r\n    console.log(\"fetchuse\");\r\n    fetchUser();\r\n  }, []);\r\n  const fetchUser = async () => {\r\n    const res = await fetch(`http://localhost:3000/api/user`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: token,\r\n      },\r\n    });\r\n    const res2 = await res.json();\r\n    console.log(res2);\r\n    setUsers(res2);\r\n  };\r\n\r\n  const handleRole = async (_id, role) => {\r\n    const res = await fetch(`http://localhost:3000/api/user`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n      body: JSON.stringify({\r\n        _id,\r\n        role,\r\n      }),\r\n    });\r\n    const res2 = await res.json();\r\n    console.log(res2);\r\n    // setUsers(res2)\r\n    const updatedUsers = users.map((user) => {\r\n      if (user.role != res2.role && user.email == res2.email) {\r\n        return res2;\r\n      } else {\r\n        return user;\r\n      }\r\n    });\r\n    setUsers(updatedUsers);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h1>User roles</h1>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Email</th>\r\n            <th>Role</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {users.map((item) => {\r\n            return (\r\n              <tr>\r\n                <td>{item.name}</td>\r\n                <td>{item.email}</td>\r\n                <td onClick={() => handleRole(item._id, item.role)}>\r\n                  {item.role}\r\n                </td>\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default UserRoles;\r\n"]},"metadata":{},"sourceType":"module"}