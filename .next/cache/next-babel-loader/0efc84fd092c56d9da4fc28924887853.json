{"ast":null,"code":"import Stripe from \"stripe\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Cart from \"../../models/Cart\";\nimport jwt from \"jsonwebtoken\";\nconst stripe = Stripe(process.env.STRIPE_SECRET);\nexport default (async (req, res) => {\n  const {\n    paymentinfo\n  } = req.body;\n  const {\n    authorization\n  } = req.headers;\n  console.log(authorization);\n\n  if (!authorization) {\n    return res.status(401).json({\n      error: \"YPu must  be LOgged in\"\n    });\n  }\n\n  try {\n    const {\n      userid\n    } = jwt.verify(authorization, \"fxfgcgvhgvh\");\n    const cart = Cart.findOne({\n      user: userid\n    }).populate(\"products.prod\");\n    let price = 0;\n    cart.products.forEach(item => {\n      price = price + item.quantity * item.prod.price;\n    });\n    const pcustomer = await stripe.cutomers.list({\n      email: paymentinfo.email\n    });\n    const excustomer = pcustomer.data.length > 0;\n    let newcustomer;\n\n    if (!excustomer) {\n      newcustomer = await stripe.customers.create({\n        email: paymentinfo.email,\n        source: paymentinfo.id\n      });\n    }\n\n    const charge = await stripe.charges.create({\n      currency: \"INR\",\n      amount: price * 100,\n      receipt_email: paymentinfo.email,\n      customer: excustomer ? pcustomer.data[0].id : newcustomer.id,\n      description: `you purchased a product | ${paymentinfo.email}`\n    }, {\n      idempotencyKey: uuidv4()\n    });\n    res.status(200).json({\n      message: \"paymet was succeful\"\n    });\n  } catch (err) {\n    res.status(200).json({\n      error: \"error in paymet\"\n    });\n  }\n});","map":{"version":3,"sources":["C:/Users/TCZ-NISHU/Desktop/myprojects/next-p/pages/api/payment.js"],"names":["Stripe","v4","uuidv4","Cart","jwt","stripe","process","env","STRIPE_SECRET","req","res","paymentinfo","body","authorization","headers","console","log","status","json","error","userid","verify","cart","findOne","user","populate","price","products","forEach","item","quantity","prod","pcustomer","cutomers","list","email","excustomer","data","length","newcustomer","customers","create","source","id","charge","charges","currency","amount","receipt_email","customer","description","idempotencyKey","message","err"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AAEA,MAAMC,MAAM,GAAGL,MAAM,CAACM,OAAO,CAACC,GAAR,CAAYC,aAAb,CAArB;AACA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAM;AAAEC,IAAAA;AAAF,MAAkBF,GAAG,CAACG,IAA5B;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAoBJ,GAAG,CAACK,OAA9B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,aAAZ;;AAEA,MAAI,CAACA,aAAL,EAAoB;AAClB,WAAOH,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAArB,CAAP;AACD;;AACD,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAahB,GAAG,CAACiB,MAAJ,CAAWR,aAAX,EAA0B,aAA1B,CAAnB;AACA,UAAMS,IAAI,GAAGnB,IAAI,CAACoB,OAAL,CAAa;AAAEC,MAAAA,IAAI,EAAEJ;AAAR,KAAb,EAA+BK,QAA/B,CAAwC,eAAxC,CAAb;AACA,QAAIC,KAAK,GAAG,CAAZ;AACAJ,IAAAA,IAAI,CAACK,QAAL,CAAcC,OAAd,CAAuBC,IAAD,IAAU;AAC9BH,MAAAA,KAAK,GAAGA,KAAK,GAAGG,IAAI,CAACC,QAAL,GAAgBD,IAAI,CAACE,IAAL,CAAUL,KAA1C;AACD,KAFD;AAGA,UAAMM,SAAS,GAAG,MAAM3B,MAAM,CAAC4B,QAAP,CAAgBC,IAAhB,CAAqB;AAC3CC,MAAAA,KAAK,EAAExB,WAAW,CAACwB;AADwB,KAArB,CAAxB;AAGA,UAAMC,UAAU,GAAGJ,SAAS,CAACK,IAAV,CAAeC,MAAf,GAAwB,CAA3C;AACA,QAAIC,WAAJ;;AACA,QAAI,CAACH,UAAL,EAAiB;AACfG,MAAAA,WAAW,GAAG,MAAMlC,MAAM,CAACmC,SAAP,CAAiBC,MAAjB,CAAwB;AAC1CN,QAAAA,KAAK,EAAExB,WAAW,CAACwB,KADuB;AAE1CO,QAAAA,MAAM,EAAE/B,WAAW,CAACgC;AAFsB,OAAxB,CAApB;AAID;;AACD,UAAMC,MAAM,GAAG,MAAMvC,MAAM,CAACwC,OAAP,CAAeJ,MAAf,CACnB;AACEK,MAAAA,QAAQ,EAAE,KADZ;AAEEC,MAAAA,MAAM,EAAErB,KAAK,GAAG,GAFlB;AAGEsB,MAAAA,aAAa,EAAErC,WAAW,CAACwB,KAH7B;AAIEc,MAAAA,QAAQ,EAAEb,UAAU,GAAGJ,SAAS,CAACK,IAAV,CAAe,CAAf,EAAkBM,EAArB,GAA0BJ,WAAW,CAACI,EAJ5D;AAKEO,MAAAA,WAAW,EAAG,6BAA4BvC,WAAW,CAACwB,KAAM;AAL9D,KADmB,EAQnB;AACEgB,MAAAA,cAAc,EAAEjD,MAAM;AADxB,KARmB,CAArB;AAYAQ,IAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEkC,MAAAA,OAAO,EAAE;AAAX,KAArB;AACD,GA/BD,CA+BE,OAAOC,GAAP,EAAY;AACZ3C,IAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAArB;AACD;AACF,CA1CD","sourcesContent":["import Stripe from \"stripe\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport Cart from \"../../models/Cart\";\r\nimport jwt from \"jsonwebtoken\";\r\n\r\nconst stripe = Stripe(process.env.STRIPE_SECRET);\r\nexport default async (req, res) => {\r\n  const { paymentinfo } = req.body;\r\n  const { authorization } = req.headers;\r\n  console.log(authorization);\r\n\r\n  if (!authorization) {\r\n    return res.status(401).json({ error: \"YPu must  be LOgged in\" });\r\n  }\r\n  try {\r\n    const { userid } = jwt.verify(authorization, \"fxfgcgvhgvh\");\r\n    const cart = Cart.findOne({ user: userid }).populate(\"products.prod\");\r\n    let price = 0;\r\n    cart.products.forEach((item) => {\r\n      price = price + item.quantity * item.prod.price;\r\n    });\r\n    const pcustomer = await stripe.cutomers.list({\r\n      email: paymentinfo.email,\r\n    });\r\n    const excustomer = pcustomer.data.length > 0;\r\n    let newcustomer;\r\n    if (!excustomer) {\r\n      newcustomer = await stripe.customers.create({\r\n        email: paymentinfo.email,\r\n        source: paymentinfo.id,\r\n      });\r\n    }\r\n    const charge = await stripe.charges.create(\r\n      {\r\n        currency: \"INR\",\r\n        amount: price * 100,\r\n        receipt_email: paymentinfo.email,\r\n        customer: excustomer ? pcustomer.data[0].id : newcustomer.id,\r\n        description: `you purchased a product | ${paymentinfo.email}`,\r\n      },\r\n      {\r\n        idempotencyKey: uuidv4(),\r\n      }\r\n    );\r\n    res.status(200).json({ message: \"paymet was succeful\" });\r\n  } catch (err) {\r\n    res.status(200).json({ error: \"error in paymet\" });\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}