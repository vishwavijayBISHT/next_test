{"ast":null,"code":"import initDB from \"../../helpers/initDb\";\nimport UserIn from \"../../models/UserIn\";\nimport bcrypt from \"bcryptjs\";\ninitDB();\nexport default (async (req, res) => {\n  const {\n    name,\n    email,\n    pass\n  } = req.body;\n  console.log(name, email, pass);\n\n  try {\n    if (!name || !email || !pass) {\n      return res.status(422).json({\n        error: \"Pls add all the fields\"\n      });\n    }\n\n    const user = await UserIn.findOne({\n      email\n    });\n\n    if (user) {\n      return res.status(422).json({\n        error: \"User Already Exist\"\n      });\n    }\n\n    const hpass = await bcrypt.hash(pass, 12);\n    const newUser = await new UserIn({\n      name,\n      email,\n      pass: hpass\n    }).save();\n    console.log(newUser);\n    res.status(201).json({\n      message: \"signup success\"\n    });\n  } catch (err) {\n    console.log(err);\n  }\n});","map":{"version":3,"sources":["C:/Users/TCZ-NISHU/Desktop/myprojects/next-p/pages/api/signup.js"],"names":["initDB","UserIn","bcrypt","req","res","name","email","pass","body","console","log","status","json","error","user","findOne","hpass","hash","newUser","save","message","err"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACAF,MAAM;AACN,gBAAe,OAAOG,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAAwBJ,GAAG,CAACK,IAAlC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ,EAAkBC,KAAlB,EAAyBC,IAAzB;;AACA,MAAI;AACF,QAAI,CAACF,IAAD,IAAS,CAACC,KAAV,IAAmB,CAACC,IAAxB,EAA8B;AAC5B,aAAOH,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAArB,CAAP;AACD;;AACD,UAAMC,IAAI,GAAG,MAAMb,MAAM,CAACc,OAAP,CAAe;AAAET,MAAAA;AAAF,KAAf,CAAnB;;AACA,QAAIQ,IAAJ,EAAU;AACR,aAAOV,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAArB,CAAP;AACD;;AACD,UAAMG,KAAK,GAAG,MAAMd,MAAM,CAACe,IAAP,CAAYV,IAAZ,EAAkB,EAAlB,CAApB;AACA,UAAMW,OAAO,GAAG,MAAM,IAAIjB,MAAJ,CAAW;AAC/BI,MAAAA,IAD+B;AAE/BC,MAAAA,KAF+B;AAG/BC,MAAAA,IAAI,EAAES;AAHyB,KAAX,EAInBG,IAJmB,EAAtB;AAKAV,IAAAA,OAAO,CAACC,GAAR,CAAYQ,OAAZ;AACAd,IAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEQ,MAAAA,OAAO,EAAE;AAAX,KAArB;AACD,GAhBD,CAgBE,OAAOC,GAAP,EAAY;AACZZ,IAAAA,OAAO,CAACC,GAAR,CAAYW,GAAZ;AACD;AACF,CAtBD","sourcesContent":["import initDB from \"../../helpers/initDb\";\r\nimport UserIn from \"../../models/UserIn\";\r\nimport bcrypt from \"bcryptjs\";\r\ninitDB();\r\nexport default async (req, res) => {\r\n  const { name, email, pass } = req.body;\r\n  console.log(name, email, pass);\r\n  try {\r\n    if (!name || !email || !pass) {\r\n      return res.status(422).json({ error: \"Pls add all the fields\" });\r\n    }\r\n    const user = await UserIn.findOne({ email });\r\n    if (user) {\r\n      return res.status(422).json({ error: \"User Already Exist\" });\r\n    }\r\n    const hpass = await bcrypt.hash(pass, 12);\r\n    const newUser = await new UserIn({\r\n      name,\r\n      email,\r\n      pass: hpass,\r\n    }).save();\r\n    console.log(newUser);\r\n    res.status(201).json({ message: \"signup success\" });\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}