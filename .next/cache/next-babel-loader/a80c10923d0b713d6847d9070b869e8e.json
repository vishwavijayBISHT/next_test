{"ast":null,"code":"import initDB from \"../../helpers/initDb\";\nimport UserIn from \"../../models/UserIn\";\nimport bcrypt from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\ninitDB();\nexport default (async (req, res) => {\n  const {\n    email,\n    pass\n  } = req.body;\n\n  try {\n    if (!email || !pass) {\n      return res.status(422).json({\n        error: \"Pls add all the fields\"\n      });\n    }\n\n    const user = await UserIn.findOne({\n      email\n    });\n\n    if (!user) {\n      return res.status(404).json({\n        error: \"User not found\"\n      });\n    }\n\n    const match = await bcrypt.compare(pass, user.password);\n\n    if (match) {\n      const token = jwt.sign({\n        userid: user._id\n      }, \"fxfgcgvhgvh\", {\n        expiresIn: \"7d\"\n      });\n      res.status(201).json({\n        token: token\n      });\n    } else {\n      return res.status(401).json({\n        error: \"emial pr password dont match\"\n      });\n    }\n  } catch (err) {\n    console.log(err);\n  }\n});","map":{"version":3,"sources":["C:/Users/TCZ-NISHU/Desktop/myprojects/next-p/pages/api/login.js"],"names":["initDB","UserIn","bcrypt","jwt","req","res","email","pass","body","status","json","error","user","findOne","match","compare","password","token","sign","userid","_id","expiresIn","err","console","log"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AAEAH,MAAM;AACN,gBAAe,OAAOI,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAkBH,GAAG,CAACI,IAA5B;;AAEA,MAAI;AACF,QAAI,CAACF,KAAD,IAAU,CAACC,IAAf,EAAqB;AACnB,aAAOF,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAArB,CAAP;AACD;;AACD,UAAMC,IAAI,GAAG,MAAMX,MAAM,CAACY,OAAP,CAAe;AAAEP,MAAAA;AAAF,KAAf,CAAnB;;AACA,QAAI,CAACM,IAAL,EAAW;AACT,aAAOP,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAArB,CAAP;AACD;;AACD,UAAMG,KAAK,GAAG,MAAMZ,MAAM,CAACa,OAAP,CAAeR,IAAf,EAAqBK,IAAI,CAACI,QAA1B,CAApB;;AACA,QAAIF,KAAJ,EAAW;AACT,YAAMG,KAAK,GAAGd,GAAG,CAACe,IAAJ,CAAS;AAAEC,QAAAA,MAAM,EAAEP,IAAI,CAACQ;AAAf,OAAT,EAA+B,aAA/B,EAA8C;AAC1DC,QAAAA,SAAS,EAAE;AAD+C,OAA9C,CAAd;AAGAhB,MAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEO,QAAAA,KAAK,EAAEA;AAAT,OAArB;AACD,KALD,MAKO;AACL,aAAOZ,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAArB,CAAP;AACD;AACF,GAjBD,CAiBE,OAAOW,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF,CAvBD","sourcesContent":["import initDB from \"../../helpers/initDb\";\r\nimport UserIn from \"../../models/UserIn\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport jwt from \"jsonwebtoken\";\r\n\r\ninitDB();\r\nexport default async (req, res) => {\r\n  const { email, pass } = req.body;\r\n\r\n  try {\r\n    if (!email || !pass) {\r\n      return res.status(422).json({ error: \"Pls add all the fields\" });\r\n    }\r\n    const user = await UserIn.findOne({ email });\r\n    if (!user) {\r\n      return res.status(404).json({ error: \"User not found\" });\r\n    }\r\n    const match = await bcrypt.compare(pass, user.password);\r\n    if (match) {\r\n      const token = jwt.sign({ userid: user._id }, \"fxfgcgvhgvh\", {\r\n        expiresIn: \"7d\",\r\n      });\r\n      res.status(201).json({ token: token });\r\n    } else {\r\n      return res.status(401).json({ error: \"emial pr password dont match\" });\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}