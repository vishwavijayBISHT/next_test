{"ast":null,"code":"import User from \"../../models/UserIn\";\nimport moduleName from 'j';\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"GET\":\n      await fetchUsers(req, res);\n      break;\n\n    case \"PUT\":\n      await ChangeRole(req, res);\n      break;\n  }\n});\n\nfunction Authinicated(icomponenet) {\n  return (req, res) => {\n    const {\n      authorization\n    } = req.headers;\n    console.log(authorization);\n\n    if (!authorization) {\n      return res.status(401).json({\n        error: \"you must be login\"\n      });\n    }\n\n    try {\n      const {\n        userid\n      } = jwt.verify(authorization, \"fxfgcgvhgvh\");\n      req.userid = userid;\n      return icomponenet(req, res);\n    } catch (err) {\n      return res.status(401).json({\n        error: \"you must be login\"\n      });\n    }\n  };\n}\n\nconst fetchUsers = Authinicated(async (req, res) => {\n  try {\n    console.log(\"fetcehds\");\n    const users = await User.find({\n      _id: {\n        $ne: req.userid\n      }\n    });\n    console.log(users);\n    res.status(200).json(users);\n  } catch (err) {\n    console.log(err);\n  }\n});\nconst ChangeRole = Authinicated(async (req, res) => {\n  console.log(\"change roles\");\n  const {\n    _id,\n    role\n  } = req.body;\n  const newRole = role == \"user\" ? \"admin\" : \"user\";\n  const users = await User.findOneAndUpdate({\n    _id\n  }, {\n    role: newRole\n  }, {\n    new: true\n  }).select(\"-password\");\n  res.status(200).json(users);\n});","map":{"version":3,"sources":["C:/Users/TCZ-NISHU/Desktop/myprojects/next-p/pages/api/user.js"],"names":["User","moduleName","req","res","method","fetchUsers","ChangeRole","Authinicated","icomponenet","authorization","headers","console","log","status","json","error","userid","jwt","verify","err","users","find","_id","$ne","role","body","newRole","findOneAndUpdate","new","select"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,qBAAjB;AACA,OAAOC,UAAP,MAAuB,GAAvB;AAEA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjC,UAAQD,GAAG,CAACE,MAAZ;AACE,SAAK,KAAL;AACE,YAAMC,UAAU,CAACH,GAAD,EAAMC,GAAN,CAAhB;AACA;;AACF,SAAK,KAAL;AACE,YAAMG,UAAU,CAACJ,GAAD,EAAMC,GAAN,CAAhB;AACA;AANJ;AAQD,CATD;;AAWA,SAASI,YAAT,CAAsBC,WAAtB,EAAmC;AACjC,SAAO,CAACN,GAAD,EAAMC,GAAN,KAAc;AACnB,UAAM;AAAEM,MAAAA;AAAF,QAAoBP,GAAG,CAACQ,OAA9B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,aAAZ;;AAEA,QAAI,CAACA,aAAL,EAAoB;AAClB,aAAON,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAArB,CAAP;AACD;;AACD,QAAI;AACF,YAAM;AAAEC,QAAAA;AAAF,UAAaC,GAAG,CAACC,MAAJ,CAAWT,aAAX,EAA0B,aAA1B,CAAnB;AACAP,MAAAA,GAAG,CAACc,MAAJ,GAAaA,MAAb;AAEA,aAAOR,WAAW,CAACN,GAAD,EAAMC,GAAN,CAAlB;AACD,KALD,CAKE,OAAOgB,GAAP,EAAY;AACZ,aAAOhB,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAArB,CAAP;AACD;AACF,GAfD;AAgBD;;AACD,MAAMV,UAAU,GAAGE,YAAY,CAAC,OAAOL,GAAP,EAAYC,GAAZ,KAAoB;AAClD,MAAI;AACFQ,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,UAAMQ,KAAK,GAAG,MAAMpB,IAAI,CAACqB,IAAL,CAAU;AAAEC,MAAAA,GAAG,EAAE;AAAEC,QAAAA,GAAG,EAAErB,GAAG,CAACc;AAAX;AAAP,KAAV,CAApB;AAEAL,IAAAA,OAAO,CAACC,GAAR,CAAYQ,KAAZ;AACAjB,IAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBM,KAArB;AACD,GAND,CAME,OAAOD,GAAP,EAAY;AACZR,IAAAA,OAAO,CAACC,GAAR,CAAYO,GAAZ;AACD;AACF,CAV8B,CAA/B;AAYA,MAAMb,UAAU,GAAGC,YAAY,CAAC,OAAOL,GAAP,EAAYC,GAAZ,KAAoB;AAClDQ,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,QAAM;AAAEU,IAAAA,GAAF;AAAOE,IAAAA;AAAP,MAAgBtB,GAAG,CAACuB,IAA1B;AACA,QAAMC,OAAO,GAAGF,IAAI,IAAI,MAAR,GAAiB,OAAjB,GAA2B,MAA3C;AACA,QAAMJ,KAAK,GAAG,MAAMpB,IAAI,CAAC2B,gBAAL,CAClB;AAAEL,IAAAA;AAAF,GADkB,EAElB;AAAEE,IAAAA,IAAI,EAAEE;AAAR,GAFkB,EAGlB;AAAEE,IAAAA,GAAG,EAAE;AAAP,GAHkB,EAIlBC,MAJkB,CAIX,WAJW,CAApB;AAKA1B,EAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBM,KAArB;AACD,CAV8B,CAA/B","sourcesContent":["import User from \"../../models/UserIn\";\r\nimport moduleName from 'j'\r\n\r\nexport default async (req, res) => {\r\n  switch (req.method) {\r\n    case \"GET\":\r\n      await fetchUsers(req, res);\r\n      break;\r\n    case \"PUT\":\r\n      await ChangeRole(req, res);\r\n      break;\r\n  }\r\n};\r\n\r\nfunction Authinicated(icomponenet) {\r\n  return (req, res) => {\r\n    const { authorization } = req.headers;\r\n    console.log(authorization);\r\n\r\n    if (!authorization) {\r\n      return res.status(401).json({ error: \"you must be login\" });\r\n    }\r\n    try {\r\n      const { userid } = jwt.verify(authorization, \"fxfgcgvhgvh\");\r\n      req.userid = userid;\r\n\r\n      return icomponenet(req, res);\r\n    } catch (err) {\r\n      return res.status(401).json({ error: \"you must be login\" });\r\n    }\r\n  };\r\n}\r\nconst fetchUsers = Authinicated(async (req, res) => {\r\n  try {\r\n    console.log(\"fetcehds\");\r\n    const users = await User.find({ _id: { $ne: req.userid } });\r\n\r\n    console.log(users);\r\n    res.status(200).json(users);\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n});\r\n\r\nconst ChangeRole = Authinicated(async (req, res) => {\r\n  console.log(\"change roles\");\r\n  const { _id, role } = req.body;\r\n  const newRole = role == \"user\" ? \"admin\" : \"user\";\r\n  const users = await User.findOneAndUpdate(\r\n    { _id },\r\n    { role: newRole },\r\n    { new: true }\r\n  ).select(\"-password\");\r\n  res.status(200).json(users);\r\n});\r\n"]},"metadata":{},"sourceType":"module"}