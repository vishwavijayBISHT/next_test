{"ast":null,"code":"import Stripe from \"stripe\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Cart from \"../../models/Cart\";\nimport jwt from \"jsonwebtoken\";\nconst stripe = Stripe(process.env.STRIPE_SECRET);\nexport default (async (req, res) => {\n  const {\n    paymentinfo\n  } = req.body;\n  const {\n    authorization\n  } = req.headers;\n\n  if (!authorization) {\n    return res.status(401).json({\n      error: \"you must logged in\"\n    });\n  }\n\n  try {\n    const {\n      userid\n    } = jwt.verify(authorization, \"\");\n    const cart = await Cart.findOne({\n      user: userId\n    }).populate(\"products.product\");\n    let price = 0;\n    cart.products.forEach(item => {\n      price = price + item.quantity * item.product.price;\n    });\n    const prevCustomer = await stripe.customers.list({\n      email: paymentInfo.email\n    });\n    const isExistingCustomer = prevCustomer.data.length > 0;\n    let newCustomer;\n\n    if (!isExistingCustomer) {\n      newCustomer = await stripe.customers.create({\n        email: paymentInfo.email,\n        source: paymentInfo.id\n      });\n    }\n\n    await stripe.charges.create({\n      currency: \"INR\",\n      amount: price * 100,\n      receipt_email: paymentInfo.email,\n      customer: isExistingCustomer ? prevCustomer.data[0].id : newCustomer.id,\n      description: `you purchased a product | ${paymentInfo.email}`\n    }, {\n      idempotencyKey: uuidV4()\n    });\n    res.status(200).json({\n      message: \"paymet was succeful\"\n    });\n  } catch (err) {\n    res.status(200).json({\n      error: \"error in paymet\"\n    });\n  }\n});","map":{"version":3,"sources":["C:/Users/TCZ-NISHU/Desktop/myprojects/next-p/pages/api/payment.js"],"names":["Stripe","v4","uuidv4","Cart","jwt","stripe","process","env","STRIPE_SECRET","req","res","paymentinfo","body","authorization","headers","status","json","error","userid","verify","cart","findOne","user","userId","populate","price","products","forEach","item","quantity","product","prevCustomer","customers","list","email","paymentInfo","isExistingCustomer","data","length","newCustomer","create","source","id","charges","currency","amount","receipt_email","customer","description","idempotencyKey","uuidV4","message","err"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AAEA,MAAMC,MAAM,GAAGL,MAAM,CAACM,OAAO,CAACC,GAAR,CAAYC,aAAb,CAArB;AACA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAM;AAAEC,IAAAA;AAAF,MAAkBF,GAAG,CAACG,IAA5B;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAoBJ,GAAG,CAACK,OAA9B;;AACA,MAAI,CAACD,aAAL,EAAoB;AAClB,WAAOH,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAArB,CAAP;AACD;;AACD,MAAI;AACG,UAAM;AAAEC,MAAAA;AAAF,QAAad,GAAG,CAACe,MAAJ,CAAWN,aAAX,EAA0B,EAA1B,CAAnB;AACA,UAAMO,IAAI,GAAG,MAAMjB,IAAI,CAACkB,OAAL,CAAa;AAAEC,MAAAA,IAAI,EAAEC;AAAR,KAAb,EAA+BC,QAA/B,CACjB,kBADiB,CAAnB;AAGA,QAAIC,KAAK,GAAG,CAAZ;AACAL,IAAAA,IAAI,CAACM,QAAL,CAAcC,OAAd,CAAuBC,IAAD,IAAU;AAC9BH,MAAAA,KAAK,GAAGA,KAAK,GAAGG,IAAI,CAACC,QAAL,GAAgBD,IAAI,CAACE,OAAL,CAAaL,KAA7C;AACD,KAFD;AAGA,UAAMM,YAAY,GAAG,MAAM1B,MAAM,CAAC2B,SAAP,CAAiBC,IAAjB,CAAsB;AAC/CC,MAAAA,KAAK,EAAEC,WAAW,CAACD;AAD4B,KAAtB,CAA3B;AAGA,UAAME,kBAAkB,GAAGL,YAAY,CAACM,IAAb,CAAkBC,MAAlB,GAA2B,CAAtD;AACA,QAAIC,WAAJ;;AACA,QAAI,CAACH,kBAAL,EAAyB;AACvBG,MAAAA,WAAW,GAAG,MAAMlC,MAAM,CAAC2B,SAAP,CAAiBQ,MAAjB,CAAwB;AAC1CN,QAAAA,KAAK,EAAEC,WAAW,CAACD,KADuB;AAE1CO,QAAAA,MAAM,EAAEN,WAAW,CAACO;AAFsB,OAAxB,CAApB;AAID;;AAED,UAAMrC,MAAM,CAACsC,OAAP,CAAeH,MAAf,CACJ;AACEI,MAAAA,QAAQ,EAAE,KADZ;AAEEC,MAAAA,MAAM,EAAEpB,KAAK,GAAG,GAFlB;AAGEqB,MAAAA,aAAa,EAAEX,WAAW,CAACD,KAH7B;AAIEa,MAAAA,QAAQ,EAAEX,kBAAkB,GACxBL,YAAY,CAACM,IAAb,CAAkB,CAAlB,EAAqBK,EADG,GAExBH,WAAW,CAACG,EANlB;AAOEM,MAAAA,WAAW,EAAG,6BAA4Bb,WAAW,CAACD,KAAM;AAP9D,KADI,EAUJ;AACEe,MAAAA,cAAc,EAAEC,MAAM;AADxB,KAVI,CAAN;AAcLxC,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEmC,MAAAA,OAAO,EAAE;AAAX,KAArB;AACD,GApCD,CAoCE,OAAOC,GAAP,EAAY;AACZ1C,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAArB;AACD;AACF,CA7CD","sourcesContent":["import Stripe from \"stripe\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport Cart from \"../../models/Cart\";\r\nimport jwt from \"jsonwebtoken\";\r\n\r\nconst stripe = Stripe(process.env.STRIPE_SECRET);\r\nexport default async (req, res) => {\r\n  const { paymentinfo } = req.body;\r\n  const { authorization } = req.headers;\r\n  if (!authorization) {\r\n    return res.status(401).json({ error: \"you must logged in\" });\r\n  }\r\n  try {\r\n         const { userid } = jwt.verify(authorization, \"\");\r\n         const cart = await Cart.findOne({ user: userId }).populate(\r\n           \"products.product\"\r\n         );\r\n         let price = 0;\r\n         cart.products.forEach((item) => {\r\n           price = price + item.quantity * item.product.price;\r\n         });\r\n         const prevCustomer = await stripe.customers.list({\r\n           email: paymentInfo.email,\r\n         });\r\n         const isExistingCustomer = prevCustomer.data.length > 0;\r\n         let newCustomer;\r\n         if (!isExistingCustomer) {\r\n           newCustomer = await stripe.customers.create({\r\n             email: paymentInfo.email,\r\n             source: paymentInfo.id,\r\n           });\r\n         }\r\n\r\n         await stripe.charges.create(\r\n           {\r\n             currency: \"INR\",\r\n             amount: price * 100,\r\n             receipt_email: paymentInfo.email,\r\n             customer: isExistingCustomer\r\n               ? prevCustomer.data[0].id\r\n               : newCustomer.id,\r\n             description: `you purchased a product | ${paymentInfo.email}`,\r\n           },\r\n           {\r\n             idempotencyKey: uuidV4(),\r\n           }\r\n         );\r\n    res.status(200).json({ message: \"paymet was succeful\" });\r\n  } catch (err) {\r\n    res.status(200).json({ error: \"error in paymet\" });\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}