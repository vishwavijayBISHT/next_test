{"ast":null,"code":"import Stripe from \"stripe\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Cart from \"../../models/Cart\";\nimport jwt from \"jsonwebtoken\";\nimport Order from \"../../models/Order\";\nconst aa = \"sk_test_51I5pIaKfgiJaPMqtUEMeVUk8S1mRPK651QVX84qJ7vnFG2LiSfxylX4R2sdbvo3qxbbLyhUU69hmm6dXN2wcPlKz00KhGUNHGH\";\nconst stripe = Stripe(aa);\nexport default (async (req, res) => {\n  const {\n    paymentinfo\n  } = req.body;\n  const {\n    authorization\n  } = req.headers;\n  let a = authorization;\n  const bb = a.replace(\"Bearer \", \"\");\n  console.log(\"rtyuikl   \" + bb);\n\n  if (!authorization) {\n    return res.status(401).json({\n      error: \"you must logged in\"\n    });\n  }\n\n  try {\n    const {\n      userid\n    } = jwt.verify(bb, \"fxfgcgvhgvh\");\n    const cart = await Cart.findOne({\n      user: userid\n    }).populate(\"products.prod\");\n    let price = 0;\n    cart.products.forEach(item => {\n      price = price + item.quantity * item.prod.price;\n    });\n    const prevCustomer = await stripe.customers.list({\n      email: paymentinfo.email\n    });\n    const isExistingCustomer = prevCustomer.data.length > 0;\n    let newCustomer;\n\n    if (!isExistingCustomer) {\n      newCustomer = await stripe.customers.create({\n        email: paymentinfo.email,\n        source: paymentinfo.id\n      });\n    }\n\n    await stripe.charges.create({\n      currency: \"INR\",\n      amount: price * 100,\n      receipt_email: paymentinfo.email,\n      customer: isExistingCustomer ? prevCustomer.data[0].id : newCustomer.id,\n      description: `you purchased a product | ${paymentinfo.email}`\n    }, {\n      idempotencyKey: uuidv4()\n    });\n    await new Order({\n      user: userid,\n      email: paymentinfo.email,\n      total: price,\n      products: cart.products\n    }).save();\n    await Cart.findOneAndUpdate({\n      _id: cart._id\n    }, {\n      $set: {\n        products: []\n      }\n    });\n    res.status(200).json({\n      message: \"paymet was succeful\"\n    });\n  } catch (err) {\n    console.log(err);\n    res.status(200).json({\n      error: \"error in paymet\"\n    });\n  }\n});","map":{"version":3,"sources":["C:/Users/TCZ-NISHU/Desktop/myprojects/next-p/pages/api/payment.js"],"names":["Stripe","v4","uuidv4","Cart","jwt","Order","aa","stripe","req","res","paymentinfo","body","authorization","headers","a","bb","replace","console","log","status","json","error","userid","verify","cart","findOne","user","populate","price","products","forEach","item","quantity","prod","prevCustomer","customers","list","email","isExistingCustomer","data","length","newCustomer","create","source","id","charges","currency","amount","receipt_email","customer","description","idempotencyKey","total","save","findOneAndUpdate","_id","$set","message","err"],"mappings":"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","sourcesContent":["import Stripe from \"stripe\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport Cart from \"../../models/Cart\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport Order from \"../../models/Order\";\r\nconst aa =\r\n  \"sk_test_51I5pIaKfgiJaPMqtUEMeVUk8S1mRPK651QVX84qJ7vnFG2LiSfxylX4R2sdbvo3qxbbLyhUU69hmm6dXN2wcPlKz00KhGUNHGH\";\r\nconst stripe = Stripe(aa);\r\nexport default async (req, res) => {\r\n  const { paymentinfo } = req.body;\r\n  const { authorization } = req.headers;\r\n  let a = authorization;\r\n  const bb = a.replace(\"Bearer \", \"\");\r\n  console.log(\"rtyuikl   \" + bb);\r\n  if (!authorization) {\r\n    return res.status(401).json({ error: \"you must logged in\" });\r\n  }\r\n  try {\r\n    const { userid } = jwt.verify(bb, \"fxfgcgvhgvh\");\r\n    const cart = await Cart.findOne({ user: userid }).populate(\"products.prod\");\r\n    let price = 0;\r\n    cart.products.forEach((item) => {\r\n      price = price + item.quantity * item.prod.price;\r\n    });\r\n    const prevCustomer = await stripe.customers.list({\r\n      email: paymentinfo.email,\r\n    });\r\n    const isExistingCustomer = prevCustomer.data.length > 0;\r\n    let newCustomer;\r\n    if (!isExistingCustomer) {\r\n      newCustomer = await stripe.customers.create({\r\n        email: paymentinfo.email,\r\n        source: paymentinfo.id,\r\n      });\r\n    }\r\n\r\n    await stripe.charges.create(\r\n      {\r\n        currency: \"INR\",\r\n        amount: price * 100,\r\n        receipt_email: paymentinfo.email,\r\n        customer: isExistingCustomer ? prevCustomer.data[0].id : newCustomer.id,\r\n        description: `you purchased a product | ${paymentinfo.email}`,\r\n      },\r\n      {\r\n        idempotencyKey: uuidv4(),\r\n      }\r\n    );\r\n    await new Order({\r\n      user: userid,\r\n      email: paymentinfo.email,\r\n      total: price,\r\n      products: cart.products,\r\n    }).save();\r\n    await Cart.findOneAndUpdate({ _id: cart._id }, { $set: { products: [] } });\r\n    res.status(200).json({ message: \"paymet was succeful\" });\r\n  } catch (err) {\r\n    console.log(err);\r\n    res.status(200).json({ error: \"error in paymet\" });\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}