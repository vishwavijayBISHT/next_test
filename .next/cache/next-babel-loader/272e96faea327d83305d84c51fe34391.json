{"ast":null,"code":"import jwt from \"jsonwebtoken\";\nimport Cart from \"../../models/Cart\";\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"GET\":\n      await fetchuser(req, res);\n      break;\n\n    case \"PUT\":\n      await updateProducts(req, res);\n  }\n});\n\nfunction Authinicated(icomponenet) {\n  return (req, res) => {\n    const {\n      authorization\n    } = req.headers;\n    console.log(authorization);\n\n    if (!authorization) {\n      return res.status(401).json({\n        error: \"you must be login\"\n      });\n    }\n\n    try {\n      const {\n        userid\n      } = jwt.verify(authorization, \"fxfgcgvhgvh\");\n      req.userid = userid;\n      return icomponenet(req, res);\n    } catch (err) {\n      return res.status(401).json({\n        error: \"you must be login\"\n      });\n    }\n  };\n}\n\nconst fetchuser = Authinicated(async (req, res) => {\n  const cart = await Cart.findOne({\n    user: userid\n  });\n  console.log(cart.product); // return res.status(200).json({ message: \"okkkkkkk\" });\n});\nconst updateProducts = Authinicated(async (req, res) => {\n  const {\n    quantity,\n    productId\n  } = req.body;\n  const cart = await Cart.findOne({\n    user: req.userid\n  });\n  const exixt = Cart.product.some(pdoc => productId === pdoc._id);\n\n  if (exixt) {\n    await Cart.findByIdAndUpdate({\n      _id: cart._id,\n      \"product.product\": productId\n    }, {\n      $inc: {\n        \"product.$.quantity\": quantity\n      }\n    });\n  } else {\n    const newp = {\n      quantity,\n      product: productId\n    };\n    await Cart.findByIdAndUpdate({\n      _id: cart._id\n    }, {\n      $push: {\n        product: newp\n      }\n    });\n  }\n\n  res.status(200).json({\n    meaasge: \"Product added to cart\"\n  });\n});","map":{"version":3,"sources":["C:/Users/TCZ-NISHU/Desktop/myprojects/next-p/pages/api/cart.js"],"names":["jwt","Cart","req","res","method","fetchuser","updateProducts","Authinicated","icomponenet","authorization","headers","console","log","status","json","error","userid","verify","err","cart","findOne","user","product","quantity","productId","body","exixt","some","pdoc","_id","findByIdAndUpdate","$inc","newp","$push","meaasge"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AAEA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjC,UAAQD,GAAG,CAACE,MAAZ;AACE,SAAK,KAAL;AACE,YAAMC,SAAS,CAACH,GAAD,EAAMC,GAAN,CAAf;AACA;;AACF,SAAK,KAAL;AACE,YAAMG,cAAc,CAACJ,GAAD,EAAMC,GAAN,CAApB;AALJ;AAOD,CARD;;AAUA,SAASI,YAAT,CAAsBC,WAAtB,EAAmC;AACjC,SAAO,CAACN,GAAD,EAAMC,GAAN,KAAc;AACnB,UAAM;AAAEM,MAAAA;AAAF,QAAoBP,GAAG,CAACQ,OAA9B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,aAAZ;;AACA,QAAI,CAACA,aAAL,EAAoB;AAClB,aAAON,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAArB,CAAP;AACD;;AACD,QAAI;AACF,YAAM;AAAEC,QAAAA;AAAF,UAAahB,GAAG,CAACiB,MAAJ,CAAWR,aAAX,EAA0B,aAA1B,CAAnB;AACAP,MAAAA,GAAG,CAACc,MAAJ,GAAaA,MAAb;AAEA,aAAOR,WAAW,CAACN,GAAD,EAAMC,GAAN,CAAlB;AACD,KALD,CAKE,OAAOe,GAAP,EAAY;AACZ,aAAOf,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAArB,CAAP;AACD;AACF,GAdD;AAeD;;AAED,MAAMV,SAAS,GAAGE,YAAY,CAAC,OAAOL,GAAP,EAAYC,GAAZ,KAAoB;AACjD,QAAMgB,IAAI,GAAG,MAAMlB,IAAI,CAACmB,OAAL,CAAa;AAAEC,IAAAA,IAAI,EAAEL;AAAR,GAAb,CAAnB;AACAL,EAAAA,OAAO,CAACC,GAAR,CAAYO,IAAI,CAACG,OAAjB,EAFiD,CAGjD;AACD,CAJ6B,CAA9B;AAKA,MAAMhB,cAAc,GAAGC,YAAY,CAAC,OAAOL,GAAP,EAAYC,GAAZ,KAAoB;AACtD,QAAM;AAAEoB,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA0BtB,GAAG,CAACuB,IAApC;AACA,QAAMN,IAAI,GAAG,MAAMlB,IAAI,CAACmB,OAAL,CAAa;AAAEC,IAAAA,IAAI,EAAEnB,GAAG,CAACc;AAAZ,GAAb,CAAnB;AACA,QAAMU,KAAK,GAAGzB,IAAI,CAACqB,OAAL,CAAaK,IAAb,CAAmBC,IAAD,IAAUJ,SAAS,KAAKI,IAAI,CAACC,GAA/C,CAAd;;AACA,MAAIH,KAAJ,EAAW;AACT,UAAMzB,IAAI,CAAC6B,iBAAL,CACJ;AAAED,MAAAA,GAAG,EAAEV,IAAI,CAACU,GAAZ;AAAiB,yBAAmBL;AAApC,KADI,EAEJ;AAAEO,MAAAA,IAAI,EAAE;AAAE,8BAAsBR;AAAxB;AAAR,KAFI,CAAN;AAID,GALD,MAKO;AACL,UAAMS,IAAI,GAAG;AAAET,MAAAA,QAAF;AAAYD,MAAAA,OAAO,EAAEE;AAArB,KAAb;AACA,UAAMvB,IAAI,CAAC6B,iBAAL,CACJ;AACED,MAAAA,GAAG,EAAEV,IAAI,CAACU;AADZ,KADI,EAIJ;AAAEI,MAAAA,KAAK,EAAE;AAAEX,QAAAA,OAAO,EAAEU;AAAX;AAAT,KAJI,CAAN;AAMD;;AACD7B,EAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEoB,IAAAA,OAAO,EAAE;AAAX,GAArB;AACD,CAnBkC,CAAnC","sourcesContent":["import jwt from \"jsonwebtoken\";\r\nimport Cart from \"../../models/Cart\";\r\n\r\nexport default async (req, res) => {\r\n  switch (req.method) {\r\n    case \"GET\":\r\n      await fetchuser(req, res);\r\n      break;\r\n    case \"PUT\":\r\n      await updateProducts(req, res);\r\n  }\r\n};\r\n\r\nfunction Authinicated(icomponenet) {\r\n  return (req, res) => {\r\n    const { authorization } = req.headers;\r\n    console.log(authorization);\r\n    if (!authorization) {\r\n      return res.status(401).json({ error: \"you must be login\" });\r\n    }\r\n    try {\r\n      const { userid } = jwt.verify(authorization, \"fxfgcgvhgvh\");\r\n      req.userid = userid;\r\n\r\n      return icomponenet(req, res);\r\n    } catch (err) {\r\n      return res.status(401).json({ error: \"you must be login\" });\r\n    }\r\n  };\r\n}\r\n\r\nconst fetchuser = Authinicated(async (req, res) => {\r\n  const cart = await Cart.findOne({ user: userid });\r\n  console.log(cart.product);\r\n  // return res.status(200).json({ message: \"okkkkkkk\" });\r\n});\r\nconst updateProducts = Authinicated(async (req, res) => {\r\n  const { quantity, productId } = req.body;\r\n  const cart = await Cart.findOne({ user: req.userid });\r\n  const exixt = Cart.product.some((pdoc) => productId === pdoc._id);\r\n  if (exixt) {\r\n    await Cart.findByIdAndUpdate(\r\n      { _id: cart._id, \"product.product\": productId },\r\n      { $inc: { \"product.$.quantity\": quantity } }\r\n    );\r\n  } else {\r\n    const newp = { quantity, product: productId };\r\n    await Cart.findByIdAndUpdate(\r\n      {\r\n        _id: cart._id,\r\n      },\r\n      { $push: { product: newp } }\r\n    );\r\n  }\r\n  res.status(200).json({ meaasge: \"Product added to cart\" });\r\n});\r\n"]},"metadata":{},"sourceType":"module"}